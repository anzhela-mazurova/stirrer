/*****************************************************************************
* Model: stirrer.qm
* File:  ../include/stirrer.h
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${../include::stirrer.h} .................................................*/
#ifndef stirrer_h
#define stirrer_h

#include "qpc.h"
#include "bsp.h"



#ifdef Q_SPY
#include "qs_port.h"
#endif

/* Signals */
enum StirrerSignals {
    READY_SIG = Q_USER_SIG,    // system ready
    MAX_PUB_SIG,
    /**/
    TACHO_SIG,
    /**/
    ENCI_SIG,    // encoder signals
    ENCD_SIG,
    LEFT_SIG,
    RIGHT_SIG,
    PRESS_SIG,
    RELEASE_SIG,
    CLICK_SIG,
    HOLD_SIG,
    /**/
    KEY_SIG,      // console key
    BLINK_SIG,    // display blink timer
    WARNING_SIG,  // backlight warning
    FAULT_SIG,    // motor fault
    HEARTBEAT_SIG,    // heartbeat LED
    /**/
    NAV_TIMEOUT_SIG,
    HOLD_TIMEOUT_SIG,
    /**/
    MAX_SIG       /* the last signal */
};

#ifdef Q_SPY

enum AppRecords {                 /* application-specific trace records */
     A1_STAT = QS_USER,
     COMMAND_STAT,
     CONSOLE_OUT
};

#endif    // Q_SPY

/* declare all events at once */

#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpc version 5.8.0 or higher required
#endif

/*${Events::TachoEvt} ......................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* public: */
    uint16_t val;
} TachoEvt;


/* declare AO "constructors" */
/*${AOs::Front_ctor} .......................................................*/
void Front_ctor(void);

/*${AOs::Control_ctor} .....................................................*/
void Control_ctor(void);


/* declare AOs */
/*${AOs::NavGen} ...........................................................*/
typedef struct {
/* protected: */
    QHsm super;

/* private: */
    int8_t encval;
} NavGen;

/* protected: */
QState NavGen_initial(NavGen * const me, QEvt const * const e);
QState NavGen_HandleEncoder(NavGen * const me, QEvt const * const e);
QState NavGen_Released(NavGen * const me, QEvt const * const e);
QState NavGen_Pressed(NavGen * const me, QEvt const * const e);

extern QActive* const AO_Front;

extern QActive* const AO_Control;



#endif /* stirrer_h */
